name: Database Backup

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  backup:
    name: Backup Production Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create backup
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # Extract database connection details
          DB_HOST=$(echo $DATABASE_URL | sed -E 's/.*@([^:]+).*/\1/')
          DB_NAME=$(echo $DATABASE_URL | sed -E 's/.*\/([^?]+).*/\1/')
          
          # Create backup file name with timestamp
          BACKUP_FILE="backup-$(date +%Y%m%d-%H%M%S).sql"
          
          # Create backup
          pg_dump $DATABASE_URL > $BACKUP_FILE
          
          # Compress backup
          gzip $BACKUP_FILE
          
          echo "Backup created: ${BACKUP_FILE}.gz"
          echo "backup_file=${BACKUP_FILE}.gz" >> $GITHUB_OUTPUT

      - name: Upload to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.run_number }}
          path: backup-*.sql.gz
          retention-days: 30

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚠️ Database Backup Failed',
              body: `Database backup failed on ${new Date().toISOString()}\n\nWorkflow: ${context.workflow}\nRun: ${context.runId}`,
              labels: ['backup', 'critical']
            })
